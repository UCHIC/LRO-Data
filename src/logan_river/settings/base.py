"""
Django settings for logan_river project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import json
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# Loads settings configuration data from settings.json file
config = {}
try:
    with open(os.path.join(BASE_DIR, 'settings', 'settings.json')) as data_file:
        config = json.load(data_file)
except IOError:
    print("You need to setup the settings data file (see instructions in base.py file.)")
    exit(1)

# SECURITY WARNING: keep the secret key used in production secret!
try:
    SECRET_KEY = config["secret_key"]
except KeyError:
    print("The secret key is required in the settings.json file.")
    exit(1)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'river_data.apps.RiverDataConfig',
    'odm.apps.OdmConfig'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'logan_river.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'logan_river.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {}
for database in config['databases']:
    DATABASES[database['name']] = {
        'ENGINE': database['engine'],
        'NAME': database['schema'],
        'USER': database['user'] if 'user' in database else '',
        'PASSWORD': database['password'] if 'password' in database else '',
        'HOST': database['host'] if 'host' in database else '',
        'PORT': database['port'] if 'port' in database else '',
        'OPTIONS': database['options'] if 'options' in database else {},
        'TEST': database['test'] if 'test' in database else {},
    }

DATABASE_ROUTERS = ['logan_river.db_routers.LRORouter']

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

MEDIA_URL = '/media/'

STATIC_ROOT = config["static_root"]

MEDIA_ROOT = config["media_root"]

FILE_UPLOAD_PERMISSIONS = 744

SITE_ID = 1


# Logan River Specific Configuration

WATERSHED = config['watershed']

INFLUXDB_DICT = config.get('influxdb')
INFLUXDB_USER = INFLUXDB_DICT.get('user')
INFLUXDB_PASSWORD = INFLUXDB_DICT.get('password')
INFLUXDB_DATABASE = INFLUXDB_DICT.get('database_name')
INFLUXDB_PREFIX = INFLUXDB_DICT.get('measurement_prefix')
INFLUXDB_QUERY_URL = INFLUXDB_DICT.get('query_url')
INFLUX_VALUES_QUERY = INFLUXDB_DICT.get('values_query').format(
    user=INFLUXDB_USER,
    password=INFLUXDB_PASSWORD,
    database=INFLUXDB_DATABASE,
    prefix=INFLUXDB_PREFIX,
    series_identifier='{series_identifier}'
)
INFLUX_DELETE_QUERY = INFLUXDB_DICT.get('delete_query').format(
    user=INFLUXDB_USER,
    password=INFLUXDB_PASSWORD,
    database=INFLUXDB_DATABASE,
    prefix=INFLUXDB_PREFIX,
    series_identifier='{series_identifier}'
)

GET_SITES_SERVICE = config['waterml_service_urls']['get_sites']
GET_SITE_INFO_SERVICE = config['waterml_service_urls']['get_site_info']
GET_VALUES_SERVICE = f'{INFLUXDB_QUERY_URL}?{INFLUX_VALUES_QUERY}'
DELETE_VALUES_SERVICE = f'{INFLUXDB_QUERY_URL}?{INFLUX_DELETE_QUERY}'
